{"ast":null,"code":"import { authConfig } from \"./constants\";\n\nclass Auth {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n\n  _checkResponse(res) {\n    console.log(res);\n    return res.ok ? Promise.resolve(res.json()) : Promise.reject(`Ошибка ${res.status + ` - ${res.error}`}`);\n  }\n\n  register(email, password) {\n    return fetch(`${this._baseUrl}/signup`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(this._checkResponse);\n  }\n\n  login(email, password) {\n    return fetch(`${this._baseUrl}/signin`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(this._checkResponse);\n  }\n\n  tokenCheck(token) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'GET',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${token}`\n      }\n    }).then(this._checkResponse);\n  }\n\n}\n\nexport default new Auth(authConfig);","map":{"version":3,"names":["authConfig","Auth","constructor","baseUrl","headers","_baseUrl","_headers","_checkResponse","res","console","log","ok","Promise","resolve","json","reject","status","error","register","email","password","fetch","method","body","JSON","stringify","then","login","tokenCheck","token"],"sources":["/Users/maksim/Desktop/dev/mesto-react/src/utils/Auth.js"],"sourcesContent":["import { authConfig } from \"./constants\";\r\n\r\nclass Auth {\r\n  constructor({ baseUrl, headers }) {\r\n    this._baseUrl = baseUrl;\r\n    this._headers = headers;\r\n  }\r\n\r\n  _checkResponse(res) {\r\n    console.log(res);\r\n    return (res.ok) ? Promise.resolve(res.json()) : Promise.reject(`Ошибка ${res.status + ` - ${res.error}`}`)\r\n  }\r\n\r\n  register(email, password) {\r\n    return fetch(`${this._baseUrl}/signup`, {\r\n        method: 'POST',\r\n        headers: this._headers,\r\n        body: JSON.stringify({ email, password })\r\n    })\r\n      .then(this._checkResponse);\r\n  }\r\n\r\n  login(email, password) {\r\n    return fetch(`${this._baseUrl}/signin`, {\r\n        method: 'POST',\r\n        headers: this._headers,\r\n        body: JSON.stringify({ email, password })\r\n    })\r\n      .then(this._checkResponse);\r\n  }\r\n\r\n  tokenCheck(token) {\r\n    return fetch(`${this._baseUrl}/users/me`, {\r\n        method: 'GET',\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"Authorization\" : `Bearer ${token}`\r\n        }\r\n    })\r\n      .then(this._checkResponse);\r\n  }\r\n}\r\n\r\nexport default new Auth(authConfig);"],"mappings":"AAAA,SAASA,UAAT,QAA2B,aAA3B;;AAEA,MAAMC,IAAN,CAAW;EACTC,WAAW,OAAuB;IAAA,IAAtB;MAAEC,OAAF;MAAWC;IAAX,CAAsB;IAChC,KAAKC,QAAL,GAAgBF,OAAhB;IACA,KAAKG,QAAL,GAAgBF,OAAhB;EACD;;EAEDG,cAAc,CAACC,GAAD,EAAM;IAClBC,OAAO,CAACC,GAAR,CAAYF,GAAZ;IACA,OAAQA,GAAG,CAACG,EAAL,GAAWC,OAAO,CAACC,OAAR,CAAgBL,GAAG,CAACM,IAAJ,EAAhB,CAAX,GAAyCF,OAAO,CAACG,MAAR,CAAgB,UAASP,GAAG,CAACQ,MAAJ,GAAc,MAAKR,GAAG,CAACS,KAAM,EAAE,EAAxD,CAAhD;EACD;;EAEDC,QAAQ,CAACC,KAAD,EAAQC,QAAR,EAAkB;IACxB,OAAOC,KAAK,CAAE,GAAE,KAAKhB,QAAS,SAAlB,EAA4B;MACpCiB,MAAM,EAAE,MAD4B;MAEpClB,OAAO,EAAE,KAAKE,QAFsB;MAGpCiB,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QAAEN,KAAF;QAASC;MAAT,CAAf;IAH8B,CAA5B,CAAL,CAKJM,IALI,CAKC,KAAKnB,cALN,CAAP;EAMD;;EAEDoB,KAAK,CAACR,KAAD,EAAQC,QAAR,EAAkB;IACrB,OAAOC,KAAK,CAAE,GAAE,KAAKhB,QAAS,SAAlB,EAA4B;MACpCiB,MAAM,EAAE,MAD4B;MAEpClB,OAAO,EAAE,KAAKE,QAFsB;MAGpCiB,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QAAEN,KAAF;QAASC;MAAT,CAAf;IAH8B,CAA5B,CAAL,CAKJM,IALI,CAKC,KAAKnB,cALN,CAAP;EAMD;;EAEDqB,UAAU,CAACC,KAAD,EAAQ;IAChB,OAAOR,KAAK,CAAE,GAAE,KAAKhB,QAAS,WAAlB,EAA8B;MACtCiB,MAAM,EAAE,KAD8B;MAEtClB,OAAO,EAAE;QACP,gBAAgB,kBADT;QAEP,iBAAmB,UAASyB,KAAM;MAF3B;IAF6B,CAA9B,CAAL,CAOJH,IAPI,CAOC,KAAKnB,cAPN,CAAP;EAQD;;AAtCQ;;AAyCX,eAAe,IAAIN,IAAJ,CAASD,UAAT,CAAf"},"metadata":{},"sourceType":"module"}